using NUnit.Framework;
using TDDDemo.Core;
using TDDDemo.Core.Exceptions;

namespace TDDDemo.Tests
{
    /*
     * New feature: Import Employee From External Source - EmployeeEX
     * 
     * Our system will receive employees from EmployeeEX (not included in this solution).
     * A text file will be generated by EmployeeEX with name format [EmployeeFullName]-[ExportedDate].txt
     * The format content of file is:
     * 
     * ----
     * [CitizenId-Required]|[EmployeeFirstName-Required]|[EmployeeLastName-Required]|[Age-Optional]|[DepartmentId-Required]
     * 123456789|James|Bond|50|10
     * 123456789|James|Bond||10
     * ----
     * 
     * If required content was missing, an email will be send to 
     * Admin which email was configure in newly created 'admin-email' param of PARAMETER table.
     * 
     * ----
     * Subject: Failed to import employee [EmployeeFullName]-[ExportedDate]
     * Content: An employee was failed to imported. Reason: missing [MissingParameterName] information.
     * ----
     * 
     * If the CitizenId was exist in current system, and email will be send to Admin 
     * 
     * ----
     * Subject: Failed to import employee [EmployeeFullName]-[ExportedDate]
     * Content: An employee was failed to imported. Reason: CitizenId was existed.
     * ----
     * 
     * If the importing successful, this new employee will be added to system.
     * 
     * ---- End ----
     * 
     */

    [TestFixture]
    public class EmployeeParserTests
    {
        [Test]
        public void Should_Split_Content_Into_Multiple_Strings()
        {
            EmployeeParser parser = CreateParser();

            string[] result = parser.Split("123456789|James|Bond|50|10");

            Assert.AreEqual("123456789", result[0]);
            Assert.AreEqual("James", result[1]);
            Assert.AreEqual("Bond", result[2]);
            Assert.AreEqual("50", result[3]);
            Assert.AreEqual("10", result[4]);
        }

        private static EmployeeParser CreateParser()
        {
            return new EmployeeParser();
        }

        [Test]
        public void Should_Return_Employee_When_Parse_Employee()
        {
            var parser = CreateParser();

            Employee employee = parser.ParseEmployee("123456789|James|Bond|50|10");

            Assert.AreEqual("123456789", employee.CitizenId);
            Assert.AreEqual("James", employee.FirstName);
            Assert.AreEqual("Bond", employee.LastName);
            Assert.AreEqual(50, employee.Age);
            Assert.AreEqual(10, employee.DepartmentId);
        }

        [Test]
        public void Should_Return_Employee_When_Parsing_Content_Missing_Optional_Information()
        {
            var parser = CreateParser();

            Employee employee = parser.ParseEmployee("123456789|James|Bond||10");

            Assert.AreEqual("123456789", employee.CitizenId);
            Assert.AreEqual("James", employee.FirstName);
            Assert.AreEqual("Bond", employee.LastName);
            Assert.AreEqual(null, employee.Age);
            Assert.AreEqual(10, employee.DepartmentId);
        }

        [Test]
        public void Should_Thrown_Missing_Required_DepartmentId_Information_Exception_When_Parse_Missing_DepartmentId_Content()
        {
            var parser = CreateParser();

            try
            {
                parser.ParseEmployee("123456789|James|Bond||");
                Assert.Fail();
            }
            catch (MissingInformationImportException ex)
            {
                Assert.AreEqual("DepartmentId", ex.MissingParameterName);
                Assert.Pass();
            }
        }

        [Test]
        public void Should_Thrown_Missing_Required_CitizenId_Information_Exception_When_Parse_Missing_CitizenId_Content()
        {
            var parser = CreateParser();

            try
            {
                parser.ParseEmployee("|James|Bond||10");
                Assert.Fail();
            }
            catch (MissingInformationImportException ex)
            {
                Assert.AreEqual("CitizenId", ex.MissingParameterName);
                Assert.Pass();
            }
        }
    }
}
